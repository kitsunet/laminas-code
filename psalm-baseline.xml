<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.7.1@8e0fd880141f236847ab49a06f94f788d41a4292">
  <file src="src/DeclareStatement.php">
    <MixedArgumentTypeCoercion>
      <code>$directive</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$value</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>self</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code>self::{$method}($value)</code>
    </MixedReturnStatement>
    <PossiblyUnusedMethod>
      <code>encoding</code>
      <code>getValue</code>
      <code>ticks</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Generator/AbstractGenerator.php">
    <DocblockTypeContradiction>
      <code><![CDATA[! is_array($options) && ! $options instanceof Traversable]]></code>
    </DocblockTypeContradiction>
    <MixedAssignment>
      <code>$optionName</code>
      <code>$optionValue</code>
    </MixedAssignment>
    <MixedOperand>
      <code>$optionName</code>
    </MixedOperand>
    <RedundantCastGivenDocblockType>
      <code>(bool) $isSourceDirty</code>
      <code>(string) $indentation</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Generator/AbstractMemberGenerator.php">
    <PossiblyUnusedReturnValue>
      <code>AbstractMemberGenerator</code>
      <code>AbstractMemberGenerator</code>
      <code>AbstractMemberGenerator</code>
      <code>AbstractMemberGenerator</code>
    </PossiblyUnusedReturnValue>
    <RedundantCastGivenDocblockType>
      <code>(string) $name</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Generator/BodyGenerator.php">
    <PossiblyUnusedMethod>
      <code>setContent</code>
    </PossiblyUnusedMethod>
    <RedundantCastGivenDocblockType>
      <code>(string) $content</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Generator/ClassGenerator.php">
    <ArgumentTypeCoercion>
      <code>$method</code>
      <code>$name</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>DocBlockGenerator::fromArray($value)</code>
    </DeprecatedMethod>
    <DocblockTypeContradiction>
      <code>empty($name) || ! is_string($name)</code>
      <code>is_string($name)</code>
      <code>is_string($name)</code>
    </DocblockTypeContradiction>
    <InvalidNullableReturnType>
      <code>string</code>
    </InvalidNullableReturnType>
    <MixedArgument>
      <code><![CDATA[$array['name']]]></code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>array_values($constant)</code>
      <code>array_values($constant)</code>
      <code>array_values($method)</code>
      <code>array_values($method)</code>
      <code>array_values($method)</code>
      <code>array_values($method)</code>
      <code>array_values($method)</code>
      <code>array_values($property)</code>
      <code>array_values($property)</code>
      <code>array_values($property)</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$value</code>
    </MixedAssignment>
    <MixedOperand>
      <code>static::IMPLEMENTS_KEYWORD</code>
      <code>static::OBJECT_TYPE</code>
    </MixedOperand>
    <NullableReturnStatement>
      <code><![CDATA[$this->traitUsageGenerator->getUseAlias($fqnClassName)]]></code>
    </NullableReturnStatement>
    <PossiblyFalseArgument>
      <code><![CDATA[strrpos($name, '\\')]]></code>
    </PossiblyFalseArgument>
    <PossiblyFalseOperand>
      <code><![CDATA[strrpos($name, '\\')]]></code>
    </PossiblyFalseOperand>
    <PossiblyNullOperand>
      <code>$namespaceAlias</code>
    </PossiblyNullOperand>
    <PossiblyUnusedReturnValue>
      <code>self</code>
      <code>static</code>
      <code>static</code>
      <code>static</code>
      <code>static</code>
    </PossiblyUnusedReturnValue>
    <RedundantConditionGivenDocblockType>
      <code>is_array($constant)</code>
    </RedundantConditionGivenDocblockType>
    <TypeDoesNotContainType>
      <code>! is_string($name)</code>
    </TypeDoesNotContainType>
    <UnsafeInstantiation>
      <code><![CDATA[new static($array['name'])]]></code>
      <code><![CDATA[new static($classReflection->getName())]]></code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/DocBlock/Tag.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[$tagManager->createTagFromReflection($reflectionTag)]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>Tag</code>
    </MoreSpecificReturnType>
    <PossiblyUnusedMethod>
      <code>fromReflection</code>
      <code>getDescription</code>
      <code>setDescription</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Generator/DocBlock/Tag/AuthorTag.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[$tagManager->createTagFromReflection($reflectionTag)]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>AuthorTag</code>
    </MoreSpecificReturnType>
    <PossiblyUnusedMethod>
      <code>fromReflection</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Generator/DocBlock/Tag/GenericTag.php">
    <ImplementedReturnTypeMismatch>
      <code>$this</code>
      <code>$this</code>
      <code>string|null</code>
    </ImplementedReturnTypeMismatch>
    <PossiblyNullOperand>
      <code><![CDATA[$this->name]]></code>
    </PossiblyNullOperand>
  </file>
  <file src="src/Generator/DocBlock/Tag/LicenseTag.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[$tagManager->createTagFromReflection($reflectionTag)]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>ReturnTag</code>
    </MoreSpecificReturnType>
    <PossiblyUnusedMethod>
      <code>fromReflection</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Generator/DocBlock/Tag/MethodTag.php">
    <RedundantCastGivenDocblockType>
      <code>(bool) $isStatic</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Generator/DocBlock/Tag/ParamTag.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[$tagManager->createTagFromReflection($reflectionTag)]]></code>
      <code><![CDATA[$this->setTypes($datatype)]]></code>
    </LessSpecificReturnStatement>
    <MixedArgumentTypeCoercion>
      <code>$types</code>
    </MixedArgumentTypeCoercion>
    <MoreSpecificReturnType>
      <code>ParamTag</code>
      <code>ParamTag</code>
    </MoreSpecificReturnType>
    <PossiblyUnusedMethod>
      <code>fromReflection</code>
      <code>getDatatype</code>
      <code>getParamName</code>
      <code>setParamName</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedReturnValue>
      <code>ParamTag</code>
    </PossiblyUnusedReturnValue>
    <PropertyNotSetInConstructor>
      <code>$variableName</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/DocBlock/Tag/ReturnTag.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[$tagManager->createTagFromReflection($reflectionTag)]]></code>
      <code><![CDATA[$this->setTypes($datatype)]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>ReturnTag</code>
      <code>ReturnTag</code>
    </MoreSpecificReturnType>
    <PossiblyUnusedMethod>
      <code>fromReflection</code>
      <code>getDatatype</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedReturnValue>
      <code>ReturnTag</code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="src/Generator/DocBlockGenerator.php">
    <DeprecatedClass>
      <code>new Tag()</code>
    </DeprecatedClass>
    <MixedArgument>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$value</code>
    </MixedAssignment>
    <MixedReturnTypeCoercion>
      <code><![CDATA[$this->tags]]></code>
      <code>TagInterface[]</code>
    </MixedReturnTypeCoercion>
    <RedundantCastGivenDocblockType>
      <code>(bool) $value</code>
    </RedundantCastGivenDocblockType>
    <UnsafeInstantiation>
      <code>new static()</code>
      <code>new static()</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/EnumGenerator/Cases/BackedCases.php">
    <DocblockTypeContradiction>
      <code><![CDATA[$type === 'int' || $type === 'string']]></code>
      <code><![CDATA[$type === 'string']]></code>
    </DocblockTypeContradiction>
    <NoValue>
      <code>$type</code>
    </NoValue>
  </file>
  <file src="src/Generator/EnumGenerator/Cases/CaseFactory.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$backingType->getName()]]></code>
      <code><![CDATA[static fn(ReflectionEnumBackedCase $case): string => $case->getName()]]></code>
      <code><![CDATA[static fn(ReflectionEnumBackedCase $case): string|int => $case->getBackingValue()]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Generator/FileGenerator.php">
    <DeprecatedMethod>
      <code>ClassGenerator::fromArray($class)</code>
      <code>ClassGenerator::fromArray($value)</code>
      <code><![CDATA[DeclareStatement::fromArray([$directive => $value])]]></code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code>$docBlock</code>
    </InvalidArgument>
    <InvalidArrayOffset>
      <code><![CDATA[[$directive => $value]]]></code>
    </InvalidArrayOffset>
    <LessSpecificReturnStatement>
      <code>$uses</code>
    </LessSpecificReturnStatement>
    <MissingClosureParamType>
      <code>$value</code>
    </MissingClosureParamType>
    <MixedArgument>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$name</code>
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$value</code>
    </MixedAssignment>
    <MoreSpecificReturnType>
      <code><![CDATA[array<int, array{string, null|string, false|null|string}>]]></code>
    </MoreSpecificReturnType>
    <PossiblyNullArgument>
      <code>current($use)</code>
    </PossiblyNullArgument>
    <PossiblyUndefinedArrayOffset>
      <code>$alias</code>
      <code>$import</code>
      <code>$uses[$useIndex][0]</code>
      <code>$uses[$useIndex][1]</code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUnusedMethod>
      <code>getFilename</code>
      <code>setBody</code>
      <code>setClasses</code>
      <code>setDocBlock</code>
    </PossiblyUnusedMethod>
    <RedundantCastGivenDocblockType>
      <code>(string) $body</code>
      <code>(string) $filename</code>
      <code>(string) $namespace</code>
    </RedundantCastGivenDocblockType>
    <UnsafeInstantiation>
      <code>new static()</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/InterfaceGenerator.php">
    <DeprecatedMethod>
      <code>DocBlockGenerator::fromArray($value)</code>
    </DeprecatedMethod>
    <InvalidClassConstantType>
      <code>IMPLEMENTS_KEYWORD</code>
      <code>OBJECT_TYPE</code>
    </InvalidClassConstantType>
    <MixedArgument>
      <code><![CDATA[$array['name']]]></code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$value</code>
      <code>$value</code>
    </MixedAssignment>
    <UnsafeInstantiation>
      <code><![CDATA[new static($array['name'])]]></code>
      <code><![CDATA[new static($classReflection->getName())]]></code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/MethodGenerator.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$reflectionMethod->getReturnType()]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>DocBlockGenerator::fromArray($value)</code>
      <code>ParameterGenerator::fromArray($parameter)</code>
    </DeprecatedMethod>
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <MixedArgument>
      <code><![CDATA[$array['name']]]></code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$value</code>
    </MixedAssignment>
    <PossiblyFalseArgument>
      <code><![CDATA[$reflectionMethod->getDocBlock()]]></code>
    </PossiblyFalseArgument>
    <RedundantCastGivenDocblockType>
      <code>(bool) $returnsReference</code>
    </RedundantCastGivenDocblockType>
    <UnsafeInstantiation>
      <code><![CDATA[new static($array['name'])]]></code>
      <code>new static()</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/ParameterGenerator.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$reflectionParameter->getType()]]></code>
    </ArgumentTypeCoercion>
    <MixedArgument>
      <code><![CDATA[$array['name']]]></code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$value</code>
    </MixedAssignment>
    <RedundantCastGivenDocblockType>
      <code>(bool) $passedByReference</code>
      <code>(bool) $variadic</code>
      <code>(int) $position</code>
      <code>(string) $name</code>
    </RedundantCastGivenDocblockType>
    <UnsafeInstantiation>
      <code><![CDATA[new static($array['name'])]]></code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/PropertyGenerator.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$reflectionProperty->getType()]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>DocBlockGenerator::fromArray($value)</code>
    </DeprecatedMethod>
    <MixedArgument>
      <code><![CDATA[$array['name']]]></code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$defaultValue</code>
    </MixedAssignment>
    <PossiblyUnusedProperty>
      <code>$isConst</code>
    </PossiblyUnusedProperty>
    <UnsafeInstantiation>
      <code><![CDATA[new static($array['name'])]]></code>
      <code>new static()</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/TraitGenerator.php">
    <DeprecatedMethod>
      <code>DocBlockGenerator::fromArray($value)</code>
    </DeprecatedMethod>
    <InvalidClassConstantType>
      <code>OBJECT_TYPE</code>
    </InvalidClassConstantType>
    <MixedArgument>
      <code><![CDATA[$array['name']]]></code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$value</code>
    </MixedAssignment>
    <PossiblyFalseArgument>
      <code><![CDATA[$classReflection->getDocBlock()]]></code>
    </PossiblyFalseArgument>
    <UnsafeInstantiation>
      <code><![CDATA[new static($array['name'])]]></code>
      <code><![CDATA[new static($classReflection->getName())]]></code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/TraitUsageGenerator.php">
    <DocblockTypeContradiction>
      <code>is_string($alias)</code>
    </DocblockTypeContradiction>
    <MixedArgument>
      <code>$method</code>
      <code><![CDATA[$this->traitOverrides[$method]]]></code>
      <code><![CDATA[$this->traitOverrides[$traitAndMethod]]]></code>
      <code>$traitAndMethod</code>
      <code>$traitAndMethod</code>
      <code>$traitAndMethod</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$traits</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess>
      <code><![CDATA[$this->traitOverrides[$method][$key]]]></code>
    </MixedArrayAccess>
    <MixedArrayAssignment>
      <code><![CDATA[$this->traitOverrides[$traitAndMethod][]]]></code>
    </MixedArrayAssignment>
    <MixedArrayOffset>
      <code><![CDATA[$this->traitOverrides[$method][$key]]]></code>
      <code><![CDATA[$this->traitOverrides[$traitAndMethod]]]></code>
      <code><![CDATA[$this->traitOverrides[$traitAndMethod]]]></code>
      <code><![CDATA[$this->traitOverrides[$traitAndMethod]]]></code>
    </MixedArrayOffset>
    <MixedArrayTypeCoercion>
      <code><![CDATA[$this->traitOverrides[$traitAndMethod]]]></code>
    </MixedArrayTypeCoercion>
    <MixedAssignment>
      <code>$alias</code>
      <code>$insteadof</code>
      <code>$insteadofTrait</code>
      <code>$insteadofTraits</code>
      <code>$key</code>
      <code>$traitAndMethod</code>
      <code>$traitToRemove</code>
    </MixedAssignment>
    <MixedOperand>
      <code>$insteadofTrait</code>
    </MixedOperand>
    <TooFewArguments>
      <code>addTraitOverride</code>
      <code>addTraitOverride</code>
    </TooFewArguments>
    <TypeDoesNotContainType>
      <code><![CDATA[null !== $visibility
            && $visibility !== ReflectionMethod::IS_PUBLIC
            && $visibility !== ReflectionMethod::IS_PRIVATE
            && $visibility !== ReflectionMethod::IS_PROTECTED]]></code>
    </TypeDoesNotContainType>
    <UndefinedMethod>
      <code>addAlias</code>
    </UndefinedMethod>
    <UnusedForeachValue>
      <code>$value</code>
      <code>$value</code>
    </UnusedForeachValue>
    <UnusedVariable>
      <code>$key</code>
      <code>$key</code>
      <code>$key</code>
      <code>$key</code>
      <code>$method</code>
      <code>$method</code>
    </UnusedVariable>
  </file>
  <file src="src/Generator/TraitUsageInterface.php">
    <PossiblyUnusedReturnValue>
      <code>$this</code>
      <code>$this</code>
      <code>self</code>
      <code>self</code>
      <code>self</code>
      <code>self</code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="src/Generator/TypeGenerator.php">
    <InvalidArgument>
      <code>$type</code>
    </InvalidArgument>
    <RedundantCondition>
      <code><![CDATA[$atomicType !== 'null']]></code>
      <code><![CDATA[$atomicType->type !== 'mixed' && $atomicType !== 'null']]></code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code>$type instanceof ReflectionNamedType</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Generator/ValueGenerator.php">
    <DeprecatedMethod>
      <code>getConstants</code>
    </DeprecatedMethod>
    <DocblockTypeContradiction>
      <code>$constants instanceof SplArrayObject || $constants instanceof StdlibArrayObject</code>
      <code>$constants instanceof StdlibArrayObject</code>
    </DocblockTypeContradiction>
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <MissingReturnType>
      <code>initEnvironmentConstants</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$constant</code>
      <code>$n</code>
      <code>$value</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$constant</code>
      <code>$curValue</code>
      <code>$n</code>
      <code>$v</code>
    </MixedAssignment>
    <MixedOperand>
      <code>$value</code>
    </MixedOperand>
    <PossiblyUnusedMethod>
      <code>addConstant</code>
      <code>deleteConstant</code>
      <code>getArrayDepth</code>
      <code>getOutputMode</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedProperty>
      <code>$allowedTypes</code>
    </PossiblyUnusedProperty>
    <RedundantCastGivenDocblockType>
      <code>(int) $arrayDepth</code>
      <code>(string) $outputMode</code>
      <code>(string) $type</code>
    </RedundantCastGivenDocblockType>
    <UnevaluatedCode>
      <code><![CDATA['float']]></code>
    </UnevaluatedCode>
  </file>
  <file src="src/Generic/Prototype/PrototypeClassFactory.php">
    <MixedAssignment>
      <code>$newPrototype</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>PrototypeInterface</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>setName</code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code>$newPrototype</code>
    </MixedReturnStatement>
    <PossiblyInvalidClone>
      <code><![CDATA[clone $this->genericPrototype]]></code>
    </PossiblyInvalidClone>
  </file>
  <file src="src/Reflection/ClassReflection.php">
    <ArgumentTypeCoercion>
      <code>$filter</code>
      <code>$filter</code>
    </ArgumentTypeCoercion>
    <InvalidThrow>
      <code>Exception\ExceptionInterface</code>
    </InvalidThrow>
    <LessSpecificImplementedReturnType>
      <code>int|false</code>
    </LessSpecificImplementedReturnType>
    <MethodSignatureMismatch>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
    </MethodSignatureMismatch>
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <MissingImmutableAnnotation>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
    </MissingImmutableAnnotation>
    <MixedArgumentTypeCoercion>
      <code>$lines</code>
    </MixedArgumentTypeCoercion>
    <PossiblyFalseArgument>
      <code>$startnum</code>
    </PossiblyFalseArgument>
    <PossiblyFalseOperand>
      <code>$startnum</code>
      <code><![CDATA[$this->getStartLine()]]></code>
    </PossiblyFalseOperand>
    <PossiblyFalseReference>
      <code>getStartLine</code>
    </PossiblyFalseReference>
  </file>
  <file src="src/Reflection/DocBlock/Tag/AuthorTag.php">
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
  </file>
  <file src="src/Reflection/DocBlock/Tag/GenericTag.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->contentSplitCharacter]]></code>
    </ArgumentTypeCoercion>
    <ImplementedReturnTypeMismatch>
      <code>string|null</code>
    </ImplementedReturnTypeMismatch>
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <PossiblyNullOperand>
      <code><![CDATA[$this->name]]></code>
    </PossiblyNullOperand>
    <PossiblyUnusedMethod>
      <code>getContent</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Reflection/DocBlock/Tag/LicenseTag.php">
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
  </file>
  <file src="src/Reflection/DocBlock/Tag/MethodTag.php">
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
  </file>
  <file src="src/Reflection/DocBlock/Tag/ParamTag.php">
    <PossiblyUnusedMethod>
      <code>getDescription</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Reflection/DocBlock/Tag/PropertyTag.php">
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
  </file>
  <file src="src/Reflection/DocBlockReflection.php">
    <DocblockTypeContradiction>
      <code>! is_string($filter)</code>
    </DocblockTypeContradiction>
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <MixedArgument>
      <code><![CDATA[$tag['name']]]></code>
      <code><![CDATA[$tag['value']]]></code>
      <code><![CDATA[$this->docComment]]></code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$tag['name']]]></code>
      <code><![CDATA[$tag['value']]]></code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$returnTags[]</code>
      <code>$tag</code>
      <code>$tag</code>
      <code>$tag</code>
      <code>$tag</code>
      <code>$tag</code>
      <code><![CDATA[$this->docComment]]></code>
      <code><![CDATA[$this->endLine]]></code>
      <code><![CDATA[$this->startLine]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>DocBlockTagInterface|false</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
    </MixedMethodCall>
    <MixedOperand>
      <code>$tag</code>
    </MixedOperand>
    <MixedReturnStatement>
      <code>$tag</code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion>
      <code>$returnTags</code>
      <code><![CDATA[$this->tags]]></code>
      <code>DocBlockTagInterface[]</code>
    </MixedReturnTypeCoercion>
    <PossiblyUnusedMethod>
      <code>export</code>
    </PossiblyUnusedMethod>
    <PropertyNotSetInConstructor>
      <code>$endLine</code>
      <code>$reflector</code>
      <code>$startLine</code>
    </PropertyNotSetInConstructor>
    <RedundantConditionGivenDocblockType>
      <code>is_string($commentOrReflector)</code>
    </RedundantConditionGivenDocblockType>
    <UndefinedInterfaceMethod>
      <code>getStartLine</code>
      <code>getStartLine</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Reflection/Exception/BadMethodCallException.php">
    <UnusedClass>
      <code>BadMethodCallException</code>
    </UnusedClass>
  </file>
  <file src="src/Reflection/FunctionReflection.php">
    <DeprecatedMethod>
      <code>detectType</code>
    </DeprecatedMethod>
    <FalsableReturnStatement>
      <code>parent::getStartLine()</code>
    </FalsableReturnStatement>
    <InvalidFalsableReturnType>
      <code>int</code>
    </InvalidFalsableReturnType>
    <InvalidOperand>
      <code>$endLine</code>
      <code>$endLine</code>
    </InvalidOperand>
    <MethodSignatureMismatch>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
      <code>public function __toString()</code>
    </MethodSignatureMismatch>
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <MissingImmutableAnnotation>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
      <code>public function __toString()</code>
    </MissingImmutableAnnotation>
    <MixedArgument>
      <code>$returnTypes</code>
      <code>$returnTypes</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$lines</code>
      <code>$lines</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess>
      <code>$returnTypes[0]</code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$returnType</code>
      <code>$returnTypes</code>
    </MixedAssignment>
    <MixedOperand>
      <code><![CDATA[$prototype['return']]]></code>
    </MixedOperand>
    <PossiblyFalseOperand>
      <code><![CDATA[strrpos($this->getName(), '\\')]]></code>
      <code><![CDATA[strrpos($this->getName(), '\\')]]></code>
    </PossiblyFalseOperand>
    <PossiblyFalseReference>
      <code>getDescription</code>
      <code>getTypes</code>
    </PossiblyFalseReference>
    <PossiblyInvalidOperand>
      <code>$startLine</code>
      <code>$startLine</code>
      <code>$startLine</code>
      <code>$startLine</code>
    </PossiblyInvalidOperand>
    <PossiblyUnusedMethod>
      <code>getReturn</code>
    </PossiblyUnusedMethod>
    <UndefinedInterfaceMethod>
      <code>getDescription</code>
      <code>getTypes</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Reflection/MethodReflection.php">
    <DeprecatedMethod>
      <code>detectType</code>
    </DeprecatedMethod>
    <FalsableReturnStatement>
      <code>parent::getStartLine()</code>
    </FalsableReturnStatement>
    <InvalidFalsableReturnType>
      <code>int</code>
    </InvalidFalsableReturnType>
    <MethodSignatureMismatch>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
    </MethodSignatureMismatch>
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <MissingImmutableAnnotation>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
    </MissingImmutableAnnotation>
    <MixedArgument>
      <code>$haystack[$i][0]</code>
      <code>$haystack[$i][0]</code>
      <code>$haystack[$i][0]</code>
      <code>$returnTypes</code>
      <code>$returnTypes</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$lines</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess>
      <code>$returnTypes[0]</code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$returnType</code>
      <code>$returnTypes</code>
      <code>$tokenType</code>
      <code>$tokenType</code>
      <code>$tokenType</code>
      <code>$tokenValue</code>
      <code>$tokenValue</code>
    </MixedAssignment>
    <MixedOperand>
      <code><![CDATA[$prototype['return']]]></code>
      <code>$tokenValue</code>
    </MixedOperand>
    <PossiblyFalseReference>
      <code>getStartLine</code>
      <code>getTypes</code>
    </PossiblyFalseReference>
    <UndefinedInterfaceMethod>
      <code>getTypes</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Reflection/ParameterReflection.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$function->getName()]]></code>
    </ArgumentTypeCoercion>
    <ImpureMethodCall>
      <code>getDocBlock</code>
      <code>getDocBlock</code>
      <code>getProperty</code>
      <code>getTags</code>
    </ImpureMethodCall>
    <MixedInferredReturnType>
      <code>string|null</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$type->getName()]]></code>
    </MixedReturnStatement>
    <PossiblyUnusedProperty>
      <code>$isFromMethod</code>
    </PossiblyUnusedProperty>
    <UndefinedMethod>
      <code>getName</code>
      <code>getName</code>
      <code>isBuiltin</code>
    </UndefinedMethod>
  </file>
  <file src="src/Reflection/PropertyReflection.php">
    <MethodSignatureMismatch>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
    </MethodSignatureMismatch>
    <MissingImmutableAnnotation>
      <code>#[ReturnTypeWillChange]</code>
      <code>#[ReturnTypeWillChange]</code>
    </MissingImmutableAnnotation>
  </file>
  <file src="src/Scanner/DocBlockScanner.php">
    <InvalidArrayOffset>
      <code><![CDATA[$this->tags[$tagIndex]]]></code>
      <code><![CDATA[$this->tags[$tagIndex]]]></code>
    </InvalidArrayOffset>
    <MissingClosureParamType>
      <code>$length</code>
      <code>$positionsForward</code>
      <code>$type</code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code><![CDATA[function ($length) use (&$currentWord, &$tokens, &$tokenIndex) {]]></code>
      <code>function ($positionsForward = 1) use (</code>
      <code><![CDATA[function ($type) use (&$tokenIndex, &$tokens) {]]></code>
      <code><![CDATA[function () use (&$currentChar, &$tokens, &$tokenIndex) {]]></code>
      <code><![CDATA[function () use (&$currentLine, &$MACRO_STREAM_ADVANCE_CHAR) {]]></code>
      <code><![CDATA[function () use (&$currentLine, &$tokens, &$tokenIndex) {]]></code>
      <code><![CDATA[function () use (&$currentWord, &$MACRO_STREAM_ADVANCE_CHAR) {]]></code>
      <code><![CDATA[function () use (&$currentWord, &$tokens, &$tokenIndex) {]]></code>
      <code><![CDATA[function () use (&$tokenIndex, &$tokens) {]]></code>
    </MissingClosureReturnType>
    <MixedArgument>
      <code>$currentLine</code>
      <code>$currentWord</code>
      <code>$currentWord</code>
      <code>$length</code>
      <code>$stream</code>
      <code>$stream</code>
      <code>$streamIndex</code>
      <code>$streamIndex</code>
      <code>$tokens</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code>$stream[$streamIndex]</code>
      <code><![CDATA[$this->tags[$tagIndex]['value']]]></code>
      <code><![CDATA[$this->tags[$tagIndex]['value']]]></code>
      <code>$token[0]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>$tokens[$tokenIndex][1]</code>
    </MixedArrayAccess>
    <MixedArrayAssignment>
      <code><![CDATA[$this->tags[$tagIndex]['value']]]></code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex][0]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>$tokens[$tokenIndex][1]</code>
    </MixedArrayAssignment>
    <MixedArrayOffset>
      <code>$stream[$streamIndex]</code>
      <code>$stream[$streamIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code>$context</code>
      <code>$context</code>
      <code>$context</code>
      <code>$context</code>
      <code>$context</code>
      <code>$currentChar</code>
      <code>$positionsForward</code>
      <code>$streamIndex</code>
      <code>$token</code>
      <code>$tokenIndex</code>
      <code>$tokens[$tokenIndex][0]</code>
    </MixedAssignment>
    <MixedFunctionCall>
      <code>$MACRO_STREAM_ADVANCE_CHAR()</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR()</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR()</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR(strlen($currentLine))</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR(strlen($currentWord))</code>
    </MixedFunctionCall>
    <MixedInferredReturnType>
      <code>array</code>
    </MixedInferredReturnType>
    <MixedOperand>
      <code>$CONTEXT_INSIDE_ASTERISK</code>
      <code>$CONTEXT_INSIDE_ASTERISK</code>
      <code>$CONTEXT_INSIDE_ASTERISK</code>
      <code>$CONTEXT_INSIDE_DOCBLOCK</code>
      <code>$CONTEXT_INSIDE_DOCBLOCK</code>
      <code>$CONTEXT_INSIDE_DOCBLOCK</code>
      <code>$context</code>
      <code>$streamIndex</code>
      <code><![CDATA[$this->tags[$tagIndex]['value']]]></code>
      <code>$tokenIndex</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>~$CONTEXT_INSIDE_ASTERISK</code>
      <code>~$CONTEXT_INSIDE_DOCBLOCK</code>
    </MixedOperand>
    <MixedReturnStatement>
      <code>$tokens</code>
    </MixedReturnStatement>
    <RedundantCondition>
      <code>$context === 0x00</code>
      <code><![CDATA[$mode <= 2]]></code>
    </RedundantCondition>
    <TypeDoesNotContainType>
      <code>$tagIndex !== null</code>
    </TypeDoesNotContainType>
    <UnusedVariable>
      <code>$MACRO_TOKEN_APPEND_WORD_PARTIAL</code>
      <code>$context</code>
      <code>$context</code>
      <code>$mode</code>
      <code>$tagIndex</code>
    </UnusedVariable>
  </file>
  <file src="test/Generator/AbstractGeneratorTest.php">
    <MissingReturnType>
      <code>testConstructor</code>
      <code>testSetOptionsThrowsExceptionOnInvalidArgument</code>
    </MissingReturnType>
  </file>
  <file src="test/Generator/AbstractMemberGeneratorTest.php">
    <InvalidArgument>
      <code>new stdClass()</code>
    </InvalidArgument>
    <MissingReturnType>
      <code>testSetDocBlockThrowsExceptionWithInvalidType</code>
      <code>testSetFlagsWithArray</code>
    </MissingReturnType>
  </file>
  <file src="test/Generator/Cases/BackedCasesTest.php">
    <InvalidArgument>
      <code><![CDATA['bool']]></code>
    </InvalidArgument>
  </file>
  <file src="test/Generator/ClassGeneratorTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA['']]></code>
      <code><![CDATA['ExtendedClass']]></code>
      <code><![CDATA['ExtendedClass']]></code>
      <code><![CDATA['ExtendedClass']]></code>
      <code><![CDATA['LaminasTest_Code_NsTest_BarClass']]></code>
      <code><![CDATA['ParentClass']]></code>
      <code><![CDATA[['Class1', 'Class2']]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code><![CDATA[ClassGenerator::fromArray([
            'name'                  => 'SampleClass',
            'flags'                 => ClassGenerator::FLAG_ABSTRACT,
            'extendedClass'         => 'ExtendedClassName',
            'implementedInterfaces' => ['Iterator', 'Traversable'],
            'properties'            => [
                'foo',
                ['name' => 'bar'],
            ],
            'methods'               => [
                ['name' => 'baz'],
            ],
        ])]]></code>
      <code><![CDATA[ClassGenerator::fromArray([
            'name'       => 'ClassWithFinalConst',
            'properties' => [
                [
                    'FINAL',
                    'const',
                    PropertyGenerator::FLAG_CONSTANT |
                    PropertyGenerator::FLAG_PUBLIC |
                    PropertyGenerator::FLAG_FINAL,
                ],
            ],
        ])]]></code>
      <code><![CDATA[ClassGenerator::fromArray([
            'name'     => 'SampleClass',
            'docblock' => [
                'shortdescription' => 'foo',
            ],
        ])]]></code>
      <code><![CDATA[ClassGenerator::fromArray([
            'name'     => 'SampleClass',
            'docblock' => new DocBlockGenerator('foo'),
        ])]]></code>
      <code><![CDATA[ClassGenerator::fromArray([
            'name'  => 'SomeClass',
            'flags' => ClassGenerator::FLAG_FINAL | ClassGenerator::FLAG_READONLY,
        ])]]></code>
      <code><![CDATA[ClassGenerator::fromArray([
            'name'  => 'SomeClass',
            'flags' => ClassGenerator::FLAG_FINAL,
        ])]]></code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code>$reflClass</code>
      <code>$reflClass</code>
      <code>$reflClass</code>
      <code>$reflClass</code>
      <code>$reflector</code>
      <code>$reflector</code>
      <code>$reflector</code>
      <code><![CDATA['']]></code>
      <code><![CDATA['public']]></code>
      <code><![CDATA['public']]></code>
      <code>ExceptionInterface::class</code>
      <code>[]</code>
      <code>new ClassGenerator()</code>
      <code>new ClassReflection(ClassWithDnfTypes::class)</code>
      <code>new ClassReflection(ClassWithPromotedParameter::class)</code>
      <code>new ClassReflection(ReadonlyClassWithPromotedParameter::class)</code>
      <code>true</code>
      <code>true</code>
      <code>true</code>
    </InvalidArgument>
    <InvalidCast>
      <code>[]</code>
      <code>new ClassGenerator()</code>
    </InvalidCast>
    <MissingDependency>
      <code>FooClass</code>
      <code>FooClass</code>
    </MissingDependency>
    <MixedArgument>
      <code><![CDATA[$overrides['myTrait::foo']]]></code>
      <code><![CDATA[$overrides['myTrait::foo']]]></code>
      <code><![CDATA[$overrides['myTrait::foo']]]></code>
      <code><![CDATA[$overrides['myTrait::foo']]]></code>
      <code>FooClass::class</code>
      <code>FooClass::class</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$overrides['myTrait::foo'][0]]]></code>
      <code><![CDATA[$overrides['myTrait::foo'][1]]]></code>
      <code><![CDATA[$overrides['myTrait::foo'][1]]]></code>
    </MixedArrayAccess>
    <PossiblyFalseReference>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
    </PossiblyFalseReference>
    <UndefinedClass>
      <code><![CDATA[['Class1', 'Class2']]]></code>
    </UndefinedClass>
  </file>
  <file src="test/Generator/DocBlock/Tag/AuthorTagTest.php">
    <MissingReturnType>
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testNameIsCorrect</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument>
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/GenericTagTest.php">
    <MissingReturnType>
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument>
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/LicenseTagTest.php">
    <MissingReturnType>
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testLicenseProducesCorrectDocBlockLine</code>
      <code>testNameIsCorrect</code>
    </MissingReturnType>
    <PossiblyFalseArgument>
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/MethodTagTest.php">
    <MissingReturnType>
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testGetterForMethodNameTrimsCorrectly</code>
      <code>testNameIsCorrect</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument>
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/ParamTagTest.php">
    <MissingReturnType>
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testGetterForVariableNameTrimsCorrectly</code>
      <code>testNameIsCorrect</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument>
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/PropertyTagTest.php">
    <MissingReturnType>
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testGetterForVariableNameTrimsCorrectly</code>
      <code>testNameIsCorrect</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument>
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/ReturnTagTest.php">
    <MissingReturnType>
      <code>testCreatingTagFromReflection</code>
      <code>testNameIsCorrect</code>
      <code>testReturnProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument>
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/ThrowsTagTest.php">
    <MissingReturnType>
      <code>testCreatingTagFromReflection</code>
      <code>testNameIsCorrect</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument>
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/TypableTagTest.php">
    <MissingReturnType>
      <code>testConstructorWithOptions</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testGetterForTypesAsStringWithMultipleTypes</code>
      <code>testGetterForTypesAsStringWithMultipleTypesAndDelimiter</code>
      <code>testGetterForTypesAsStringWithSingleType</code>
      <code>testGetterForTypesAsStringWithSingleTypeAndDelimiter</code>
    </MissingReturnType>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlockGeneratorTest.php">
    <DeprecatedMethod>
      <code><![CDATA[DocBlockGenerator::fromArray([
            'shortdescription' => 'foo',
            'longdescription'  => 'bar',
            'tags'             => [
                [
                    'name'        => 'foo',
                    'description' => 'bar',
                ],
            ],
        ])]]></code>
      <code>setDatatype</code>
      <code>setDatatype</code>
    </DeprecatedMethod>
    <MissingReturnType>
      <code>testCanPassTagsToConstructor</code>
      <code>testCreateFromArray</code>
      <code>testDocBlockFromReflectionAuthorTag</code>
      <code>testDocBlockFromReflectionLicenseTag</code>
      <code>testDocBlockFromReflectionLongDescription</code>
      <code>testDocBlockFromReflectionParamTag</code>
      <code>testDocBlockFromReflectionReturnTag</code>
      <code>testDocBlockFromReflectionShortDescription</code>
      <code>testDocBlockFromReflectionTagsCount</code>
      <code>testGenerateWithWordWrapDisabled</code>
      <code>testGenerateWordWrapIsEnabledByDefault</code>
      <code>testGenerationOfDocBlock</code>
      <code>testLongDescriptionGetterAndSetter</code>
      <code>testShortDescriptionGetterAndSetter</code>
      <code>testTagGettersAndSetters</code>
    </MissingReturnType>
  </file>
  <file src="test/Generator/EnumGeneratorTest.php">
    <PossiblyUnusedMethod>
      <code>validEnumSpecifications</code>
      <code>validOptionSpecifications</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Generator/FileGeneratorTest.php">
    <DeprecatedMethod>
      <code><![CDATA[FileGenerator::fromArray([
            'class' => [
                'name' => 'SampleClass',
            ],
        ])]]></code>
      <code><![CDATA[FileGenerator::fromArray([
            'declares' => [
                'fubar' => 1,
            ],
            'class'    => [
                'name' => 'SampleClass',
            ],
        ])]]></code>
      <code><![CDATA[FileGenerator::fromArray([
            'declares' => [
                'strict_types' => 'wrong type',
            ],
            'class'    => [
                'name' => 'SampleClass',
            ],
        ])]]></code>
      <code><![CDATA[FileGenerator::fromArray([
            'declares' => [
                'strict_types' => 1,
                'ticks'        => 2,
            ],
            'class'    => [
                'name' => 'SampleClass',
            ],
        ])]]></code>
      <code><![CDATA[FileGenerator::fromArray([
            'declares' => [
                'strict_types' => 1,
            ],
            'class'    => [
                'name' => 'SampleClass',
            ],
        ])]]></code>
      <code><![CDATA[FileGenerator::fromArray([
            'filename' => 'foo.php',
            'class'    => [
                'name' => 'bar',
            ],
        ])]]></code>
      <code><![CDATA[FileGenerator::fromArray([
            'filename' => 'foo.php',
            'class'    => new ClassGenerator('bar'),
        ])]]></code>
      <code><![CDATA[FileGenerator::fromArray([
            'requiredFiles' => ['SampleClass.php'],
            'class'         => [
                'abstract'              => true,
                'name'                  => 'SampleClass',
                'extendedClass'         => 'ExtendedClassName',
                'implementedInterfaces' => ['Iterator', 'Traversable'],
            ],
        ])]]></code>
      <code><![CDATA[FileGenerator::fromArray([
            'requiredFiles' => ['SampleClass.php'],
            'class'         => [
                'flags'                 => ClassGenerator::FLAG_ABSTRACT,
                'name'                  => 'SampleClass',
                'extendedClass'         => 'ExtendedClassName',
                'implementedInterfaces' => ['Iterator', 'Traversable'],
            ],
        ])]]></code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code><![CDATA[$file->getUses()]]></code>
    </InvalidArgument>
    <MissingReturnType>
      <code>testClassNotFoundException</code>
      <code>testConstruction</code>
      <code>testCreateFromArrayWithClassFromArray</code>
      <code>testCreateFromArrayWithClassInstance</code>
      <code>testFileLineEndingsAreAlwaysLineFeed</code>
      <code>testGeneratesNamespaceStatements</code>
      <code>testGeneratesUseStatements</code>
      <code>testIndentationGetterAndSetter</code>
      <code>testSetUseAllowsMultipleAliasedUseStatements</code>
      <code>testSetUseDoesntGenerateMultipleIdenticalUseStatements</code>
      <code>testSetUsesDoesntGenerateMultipleIdenticalUseStatements</code>
      <code>testSetUsesWithArrays</code>
      <code>testSetUsesWithGetUses</code>
      <code>testSetUsesWithString</code>
      <code>testSourceContentGetterAndSetter</code>
      <code>testToString</code>
    </MissingReturnType>
  </file>
  <file src="test/Generator/InterfaceGeneratorTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[['Class1', 'Class2']]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code><![CDATA[InterfaceGenerator::fromArray([
            'name'     => 'MyInterface',
            'docblock' => new DocBlockGenerator('foo'),
        ])]]></code>
      <code><![CDATA[InterfaceGenerator::fromArray([
            'name'     => 'SampleClass',
            'docblock' => [
                'shortdescription' => 'foo',
            ],
        ])]]></code>
      <code><![CDATA[InterfaceGenerator::fromArray([
            'name'    => 'SampleInterface',
            'methods' => [
                ['name' => 'baz'],
            ],
        ])]]></code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code>$reflClass</code>
      <code>new ClassReflection(self::class)</code>
    </InvalidArgument>
    <MissingReturnType>
      <code>testAbstractAccessorsReturnsFalse</code>
      <code>testClassNotAnInterfaceException</code>
      <code>testCodeGenerationShouldTakeIntoAccountNamespacesFromReflection</code>
      <code>testCreateFromArrayWithDocBlockFromArray</code>
      <code>testCreateFromArrayWithDocBlockInstance</code>
      <code>testExtendedClassAccessors</code>
      <code>testGenerateClassAndAddMethod</code>
      <code>testGenerateImplementsInterface</code>
      <code>testImplementedInterfacesAccessors</code>
      <code>testMethodAccessors</code>
      <code>testPassingANamespacedClassnameShouldGenerateAClassnameWithoutItsNamespace</code>
      <code>testPassingANamespacedClassnameShouldGenerateANamespaceDeclaration</code>
      <code>testPropertyAccessors</code>
      <code>testSetNameShouldDetermineIfNamespaceSegmentIsPresent</code>
      <code>testSetextendedclassShouldIgnoreEmptyClassnameOnGenerate</code>
      <code>testSetextendedclassShouldNotIgnoreNonEmptyClassnameOnGenerate</code>
      <code>testToString</code>
    </MissingReturnType>
    <PossiblyFalseReference>
      <code>isInterface</code>
      <code>isInterface</code>
    </PossiblyFalseReference>
    <UndefinedClass>
      <code><![CDATA[['Class1', 'Class2']]]></code>
    </UndefinedClass>
  </file>
  <file src="test/Generator/MethodGeneratorTest.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code><![CDATA[MethodGenerator::fromArray([
            'name'             => 'SampleMethod',
            'returnsreference' => $value,
        ])]]></code>
      <code><![CDATA[MethodGenerator::fromArray([
            'name'       => 'SampleMethod',
            'body'       => 'foo',
            'docblock'   => [
                'shortdescription' => 'foo',
            ],
            'abstract'   => true,
            'final'      => true,
            'static'     => true,
            'visibility' => MethodGenerator::VISIBILITY_PROTECTED,
            'returntype' => '\\SampleType',
        ])]]></code>
      <code><![CDATA[MethodGenerator::fromArray([
            'name'      => 'execute',
            'interface' => true,
            'docblock'  => [
                'shortdescription' => 'Short Description',
            ],
        ])]]></code>
      <code><![CDATA[ParameterGenerator::fromArray(['name' => 'bar', 'type' => 'array'])]]></code>
      <code><![CDATA[ParameterGenerator::fromArray(['name' => 'baz', 'type' => stdClass::class, 'position' => 1])]]></code>
      <code><![CDATA[ParameterGenerator::fromArray(['name' => 'baz', 'type' => stdClass::class])]]></code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code>new stdClass()</code>
    </InvalidArgument>
    <MissingReturnType>
      <code>testByRefReturnType</code>
      <code>testCopyMethodSignature</code>
      <code>testCreateFromArray</code>
      <code>testCreateInterfaceMethodFromArray</code>
      <code>testDefaultValueGenerationDoesNotIncludeTrailingSemicolon</code>
      <code>testDocBlockGetterAndSetter</code>
      <code>testFrom</code>
      <code>testFromByReferenceMethodReflection</code>
      <code>testMethodBodyGetterAndSetter</code>
      <code>testMethodCanHaveDocBlock</code>
      <code>testMethodConstructor</code>
      <code>testMethodFromReflection</code>
      <code>testMethodFromReflectionMultiLinesIndention</code>
      <code>testMethodParameterAccessors</code>
      <code>testMethodParameterMutator</code>
      <code>testMethodWithFinalModifierIsEmitted</code>
      <code>testMethodWithFinalModifierIsNotEmittedWhenMethodIsAbstract</code>
      <code>testMethodWithStaticModifierIsEmitted</code>
      <code>testSetMethodParameter</code>
      <code>testSetMethodParameters</code>
      <code>testSetReturnType</code>
      <code>testSetReturnTypeWithNull</code>
    </MissingReturnType>
    <PossiblyNullReference>
      <code>generate</code>
    </PossiblyNullReference>
    <PossiblyUnusedMethod>
      <code>php80Methods</code>
      <code>returnTypeHintClasses</code>
      <code>returnsReferenceValues</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Generator/ParameterGeneratorTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA['LaminasTest_Code_NsTest_BarClass']]></code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code><![CDATA[ParameterGenerator::fromArray([
            'name'              => 'SampleParameter',
            'type'              => 'int',
            'defaultvalue'      => 'default-foo',
            'passedbyreference' => false,
            'position'          => 1,
            'sourcedirty'       => false,
            'sourcecontent'     => 'foo',
            'indentation'       => '-',
            'omitdefaultvalue'  => true,
        ])]]></code>
    </DeprecatedMethod>
    <InvalidReturnStatement>
      <code><![CDATA[array_combine(
            array_map(
                static fn(array $definition) => $definition[0] . '#' . $definition[1],
                $parameters
            ),
            $parameters
        )]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>string[][]</code>
    </InvalidReturnType>
    <MissingReturnType>
      <code>testCallableTypeHint</code>
      <code>testCreateFromArray</code>
      <code>testDefaultValueGetterAndSetterPersistValue</code>
      <code>testFromReflectionGenerate</code>
      <code>testFromReflectionGetArrayHint</code>
      <code>testFromReflectionGetDefaultValue</code>
      <code>testFromReflectionGetParameterName</code>
      <code>testFromReflectionGetParameterType</code>
      <code>testFromReflectionGetReference</code>
      <code>testFromReflectionGetWithNativeType</code>
      <code>testGenerateIsCorrect</code>
      <code>testGeneratedParametersHaveEscapedDefaultValues</code>
      <code>testGeneratesSimpleHints</code>
      <code>testGetInternalClassDefaultParameterValue</code>
      <code>testNameGetterAndSetterPersistValue</code>
      <code>testOmitType</code>
      <code>testParameterGeneratorReturnsCorrectTypeForNonNamespaceClasses</code>
      <code>testPositionGetterAndSetterPersistValue</code>
      <code>testSetGetVariadic</code>
      <code>testTypeGetterAndSetterPersistValue</code>
      <code>testTypeHintFromReflection</code>
      <code>testTypeHintFromReflectionGeneratedCode</code>
      <code>testTypeHintWithValidClassName</code>
      <code>testTypehintsWithNamespaceInNamepsacedClassReturnTypewithBackslash</code>
    </MissingReturnType>
    <PossiblyUnusedMethod>
      <code>dataFromReflectionGenerate</code>
      <code>php80Methods</code>
      <code>reflectionHints</code>
      <code>simpleHints</code>
      <code>validClassName</code>
      <code>variadicHints</code>
    </PossiblyUnusedMethod>
    <UnusedMethodCall>
      <code>setAccessible</code>
    </UnusedMethodCall>
  </file>
  <file src="test/Generator/PropertyGeneratorTest.php">
    <ArgumentTypeCoercion>
      <code>$type</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code><![CDATA[PropertyGenerator::fromArray([
            'name'             => 'SampleProperty',
            'const'            => false,
            'defaultvalue'     => 'default-foo',
            'docblock'         => [
                'shortdescription' => 'foo',
            ],
            'abstract'         => true,
            'final'            => true,
            'static'           => true,
            'visibility'       => PropertyGenerator::VISIBILITY_PROTECTED,
            'omitdefaultvalue' => true,
            'type'             => TypeGenerator::fromTypeString(self::class),
        ])]]></code>
      <code><![CDATA[PropertyGenerator::fromArray([
            'name'     => 'ReadonlyProperty',
            'readonly' => true,
        ])]]></code>
      <code><![CDATA[PropertyGenerator::fromArray([
            'name' => 'someVal',
            'type' => 'invalidStringn',
        ])]]></code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code>new stdClass()</code>
    </InvalidArgument>
    <InvalidReturnStatement>
      <code><![CDATA[[
            ['string', 'foo', "'foo';"],
            ['int', 1, '1;'],
            ['integer', 1, '1;'],
            ['bool', true, 'true;'],
            ['bool', false, 'false;'],
            ['boolean', true, 'true;'],
            ['number', 1, '1;'],
            ['float', 1.23, '1.23;'],
            ['double', 1.23, '1.23;'],
            ['constant', 'FOO', 'FOO;'],
            ['null', null, 'null;'],
        ]]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>bool[][]|string[][]|int[][]|null[][]</code>
    </InvalidReturnType>
    <MissingReturnType>
      <code>testOmitType</code>
    </MissingReturnType>
    <MixedAssignment>
      <code>$generator</code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code>dataSetTypeSetValueGenerate</code>
      <code>visibility</code>
    </PossiblyUnusedMethod>
    <RedundantConditionGivenDocblockType>
      <code>assertIsArray</code>
    </RedundantConditionGivenDocblockType>
    <UnusedMethodCall>
      <code>setAccessible</code>
    </UnusedMethodCall>
  </file>
  <file src="test/Generator/PropertyValueGeneratorTest.php">
    <MissingReturnType>
      <code>testPropertyValueAddsSemicolonToValueGenerator</code>
    </MissingReturnType>
  </file>
  <file src="test/Generator/TraitGeneratorTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA['LaminasTest_Code_NsTest_BarClass']]></code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code><![CDATA[TraitGenerator::fromArray([
            'docblock' => new DocBlockGenerator('foo'),
        ])]]></code>
      <code><![CDATA[TraitGenerator::fromArray([
            'name'           => 'SampleClass',
            'containingfile' => new FileGenerator(),
        ])]]></code>
      <code><![CDATA[TraitGenerator::fromArray([
            'name'          => 'SampleClass',
            'namespacename' => $namespace,
        ])]]></code>
      <code><![CDATA[TraitGenerator::fromArray([
            'name'       => 'SampleClass',
            'properties' => [
                'foo',
                ['name' => 'bar'],
            ],
            'methods'    => [
                ['name' => 'baz'],
            ],
        ])]]></code>
      <code><![CDATA[TraitGenerator::fromArray([
            'name'     => 'SampleClass',
            'docblock' => [
                'shortdescription' => 'foo',
            ],
        ])]]></code>
      <code><![CDATA[TraitGenerator::fromArray([
            'name'     => 'SampleClass',
            'docblock' => new DocBlockGenerator('foo'),
        ])]]></code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code>$reflClass</code>
      <code>$reflClass</code>
      <code>$reflClass</code>
      <code>$reflClass</code>
      <code>$reflClass</code>
      <code>ExceptionInterface::class</code>
      <code>true</code>
      <code>true</code>
    </InvalidArgument>
    <UnusedMethodCall>
      <code>setAccessible</code>
    </UnusedMethodCall>
  </file>
  <file src="test/Generator/TypeGenerator/CompositeTypeTest.php">
    <PossiblyUnusedMethod>
      <code>validType</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Generator/TypeGenerator/IntersectionTypeTest.php">
    <PossiblyUnusedMethod>
      <code>invalidIntersectionsExamples</code>
      <code>sortingExamples</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Generator/TypeGenerator/UnionTypeTest.php">
    <PossiblyUnusedMethod>
      <code>invalidUnionsExamples</code>
      <code>sortingExamples</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Generator/TypeGeneratorTest.php">
    <MissingReturnType>
      <code>testIsAGenerator</code>
    </MissingReturnType>
    <PossiblyUnusedMethod>
      <code>invalidType</code>
      <code>validClassName</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Generator/ValueGeneratorTest.php">
    <DeprecatedMethod>
      <code>getConstants</code>
      <code>getConstants</code>
      <code>initEnvironmentConstants</code>
      <code>initEnvironmentConstants</code>
      <code>initEnvironmentConstants</code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code>$constants</code>
    </InvalidArgument>
    <MissingReturnType>
      <code>testEscaping</code>
      <code>testPropertyDefaultValueCanHandleArray</code>
      <code>testPropertyDefaultValueCanHandleArrayWithUnsortedKeys</code>
      <code>testPropertyDefaultValueCanHandleBool</code>
      <code>testPropertyDefaultValueCanHandleComplexArrayOfTypes</code>
      <code>testPropertyDefaultValueCanHandleStrings</code>
      <code>testPropertyDefaultValueCanHandleUnquotedString</code>
      <code>testPropertyDefaultValueConstructor</code>
      <code>testPropertyDefaultValueIsSettable</code>
    </MissingReturnType>
    <PossiblyUnusedMethod>
      <code>complexArray</code>
      <code>complexArrayWCustomIndent</code>
      <code>constantsType</code>
      <code>getEscapedParameters</code>
      <code>invalidValue</code>
      <code>simpleArray</code>
      <code>unsortedKeysArray</code>
      <code>validConstantTypes</code>
      <code>multipleOutputArray</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Generic/Prototype/PrototypeClassFactoryTest.php">
    <MissingReturnType>
      <code>testAddAndGetPrototype</code>
      <code>testFallBackToGeneric</code>
      <code>testSetNameOnGenericIsCalledOnce</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/ClassReflectionTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA['ReflectionClass']]></code>
      <code><![CDATA[__NAMESPACE__ . '\\' . $className]]></code>
    </ArgumentTypeCoercion>
    <MissingReturnType>
      <code>testGetContentsReturnsContents</code>
      <code>testGetContentsReturnsContentsWithImplementsOnSeparateLine</code>
      <code>testGetContentsReturnsEmptyContentsOnEvaldCode</code>
      <code>testGetContentsReturnsEmptyContentsOnInternalCode</code>
      <code>testGetTraits</code>
      <code>testInterfaceReturn</code>
      <code>testMethodReturns</code>
      <code>testParentReturn</code>
      <code>testPropertyReturns</code>
      <code>testStartLine</code>
    </MissingReturnType>
    <PossiblyFalseReference>
      <code>getName</code>
    </PossiblyFalseReference>
    <PossiblyInvalidArrayOffset>
      <code>$traitsArray[TestTraitClass3::class]</code>
    </PossiblyInvalidArrayOffset>
  </file>
  <file src="test/Reflection/DocBlock/Tag/AuthorTagTest.php">
    <MissingReturnType>
      <code>testParseName</code>
      <code>testParseNameAndEmail</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/GenericTagTest.php">
    <MissingReturnType>
      <code>testParse</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/LicenseTagTest.php">
    <MissingReturnType>
      <code>testParseUrl</code>
      <code>testParseUrlAndLicenseName</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/MethodTagTest.php">
    <DeprecatedMethod>
      <code>getReturnType</code>
      <code>getReturnType</code>
      <code>getReturnType</code>
      <code>getReturnType</code>
      <code>getReturnType</code>
    </DeprecatedMethod>
    <MissingReturnType>
      <code>testParseName</code>
      <code>testParseNameAndStatic</code>
      <code>testParseNameAndStaticAndDescription</code>
      <code>testParseNameAndType</code>
      <code>testParseNameAndTypeAndStaticAndDescription</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/PropertyTagTest.php">
    <DeprecatedMethod>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
    </DeprecatedMethod>
    <MissingReturnType>
      <code>testParseName</code>
      <code>testParseNameAndDescription</code>
      <code>testParseTypeAndName</code>
      <code>testParseTypeAndNameAndDescription</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/ThrowsTagTest.php">
    <MissingReturnType>
      <code>testAllCharactersFromTypenameAreSupported</code>
      <code>testMultipleTypesWithDescription</code>
      <code>testMultipleTypesWithoutDescription</code>
      <code>testSingleTypeWithDescription</code>
      <code>testSingleTypeWithoutDescription</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/VarTagTest.php">
    <MissingReturnType>
      <code>testParse</code>
    </MissingReturnType>
    <PossiblyUnusedMethod>
      <code>varTagProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Reflection/DocBlockReflectionTest.php">
    <DeprecatedMethod>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
    </DeprecatedMethod>
    <MissingReturnType>
      <code>testDocBlockContents</code>
      <code>testDocBlockLines</code>
      <code>testDocBlockLongDescription</code>
      <code>testDocBlockShortDescription</code>
      <code>testDocBlockTags</code>
      <code>testFunctionDocBlockTags</code>
      <code>testShortDocBlocks</code>
      <code>testTabbedDocBlockTags</code>
      <code>testToString</code>
    </MissingReturnType>
    <PossiblyFalseReference>
      <code>getContents</code>
      <code>getLongDescription</code>
      <code>getShortDescription</code>
      <code>getShortDescription</code>
      <code>getShortDescription</code>
      <code>getStartLine</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>hasTag</code>
      <code>hasTag</code>
    </PossiblyFalseReference>
    <UndefinedInterfaceMethod>
      <code>getDescription</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/Reflection/FunctionReflectionTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[__NAMESPACE__ . '\\' . $functionName]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>getPrototype</code>
      <code>getPrototype</code>
    </DeprecatedMethod>
    <EmptyArrayAccess>
      <code><![CDATA[$list1['closure']]]></code>
      <code>$list2[0]</code>
      <code>$list3[0]</code>
    </EmptyArrayAccess>
    <InvalidArgument>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function1']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function1']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function10']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function10']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function11']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function11']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function12']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function12']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function2']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function3']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function3']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function4']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function4']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function5']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function5']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function6']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function6']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function7']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function7']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function8']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function8']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function9']]></code>
      <code><![CDATA['LaminasTest\Code\Reflection\TestAsset\function9']]></code>
    </InvalidArgument>
    <MissingReturnType>
      <code>testFunctionBodyReturn</code>
      <code>testFunctionClosureBodyReturn</code>
      <code>testFunctionClosureContentsReturnWithDocBlock</code>
      <code>testFunctionClosureContentsReturnWithoutDocBlock</code>
      <code>testFunctionContentsReturnWithDocBlock</code>
      <code>testFunctionContentsReturnWithoutDocBlock</code>
      <code>testFunctionDocBlockReturn</code>
      <code>testGetContentsReturnsEmptyContentsOnEvaldCode</code>
      <code>testGetContentsReturnsEmptyContentsOnInternalCode</code>
      <code>testGetPrototypeMethod</code>
      <code>testInternalFunctionBodyReturn</code>
      <code>testInternalFunctionContentsReturn</code>
      <code>testParemeterReturn</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$function5</code>
      <code>$function6</code>
      <code>$function7</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$function5</code>
      <code>$function6</code>
      <code>$function7</code>
    </MixedAssignment>
    <NullArgument>
      <code>$function1</code>
      <code>$function10</code>
      <code>$function10</code>
      <code>$function2</code>
      <code>$function2</code>
      <code>$function3</code>
      <code>$function4</code>
      <code>$function8</code>
      <code>$function9</code>
      <code>$function9</code>
      <code>$function9</code>
    </NullArgument>
    <PossiblyFalseArgument>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
    </PossiblyFalseArgument>
  </file>
  <file src="test/Reflection/MethodReflectionTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA['DOMDocument']]></code>
      <code><![CDATA['DOMDocument']]></code>
      <code><![CDATA['DateTime']]></code>
      <code><![CDATA['FooClass']]></code>
      <code><![CDATA['ReflectionClass']]></code>
      <code><![CDATA['ReflectionException']]></code>
      <code><![CDATA[__NAMESPACE__ . '\\' . $className]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>getPrototype</code>
      <code>getPrototype</code>
      <code>getPrototype</code>
      <code>getPrototype</code>
      <code>getPrototype</code>
      <code>getPrototype</code>
      <code>getPrototype</code>
      <code>getPrototype</code>
    </DeprecatedMethod>
    <MissingReturnType>
      <code>testCanParseClassBodyWhenUsingTrait</code>
      <code>testCodeGetBodyReturnsEmptyWithCommentedFunction</code>
      <code>testCodeGetContentsDoesNotThrowExceptionOnDocBlock</code>
      <code>testDeclaringClassReturn</code>
      <code>testFunctionContentsReturnWithDocBlock</code>
      <code>testGetBodyReturnsCorrectBody</code>
      <code>testGetContentsReturnsEmptyContentsOnEvaldCode</code>
      <code>testGetContentsReturnsEmptyContentsOnInternalCode</code>
      <code>testGetContentsWithCoreClass</code>
      <code>testGetPrototypeMethod</code>
      <code>testInternalFunctionBodyReturn</code>
      <code>testInternalMethodContentsReturn</code>
      <code>testMethodContentsReturnWithoutDocBlock</code>
      <code>testParemeterReturn</code>
      <code>testStartLine</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/ParameterReflectionTest.php">
    <DeprecatedMethod>
      <code>detectType</code>
      <code>detectType</code>
      <code>detectType</code>
      <code>detectType</code>
      <code>detectType</code>
    </DeprecatedMethod>
    <MissingReturnType>
      <code>testCallableTypeHint</code>
      <code>testClassReturn</code>
      <code>testClassReturnNoClassGivenReturnsNull</code>
      <code>testDeclaringClassReturn</code>
    </MissingReturnType>
    <PossiblyUnusedMethod>
      <code>docBlockHints</code>
      <code>paramType</code>
      <code>paramTypeWithNotAllParamsDeclared</code>
      <code>reflectionHints</code>
    </PossiblyUnusedMethod>
    <UndefinedMethod>
      <code>getName</code>
    </UndefinedMethod>
  </file>
  <file src="test/Reflection/PropertyReflectionTest.php">
    <MissingReturnType>
      <code>testDeclaringClassReturn</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/ReflectionDocBlockTagTest.php">
    <MissingReturnType>
      <code>testAllowsMultipleSpacesInDocBlockTagLine</code>
      <code>testAllowsMultipleSpacesInDocBlockTagLine2</code>
      <code>testNamespaceInParam</code>
      <code>testPropertyVarDoc</code>
      <code>testReturnClassWithNamespace</code>
      <code>testTagDescriptionIsReturned</code>
      <code>testTagShouldAllowJustTagNameInDocBlockTagLine</code>
      <code>testTagShouldAllowMultipleWhitespacesBeforeDescription</code>
      <code>testToString</code>
      <code>testType</code>
      <code>testTypeParam</code>
      <code>testVariableName</code>
    </MissingReturnType>
    <PossiblyFalseReference>
      <code>getAuthorEmail</code>
      <code>getAuthorName</code>
      <code>getContent</code>
      <code>getContent</code>
      <code>getDescription</code>
      <code>getDescription</code>
      <code>getDescription</code>
      <code>getName</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getVariableName</code>
      <code>getVariableName</code>
      <code>getVariableName</code>
    </PossiblyFalseReference>
    <PossiblyInvalidCast>
      <code>$tag</code>
    </PossiblyInvalidCast>
    <PossiblyUnusedMethod>
      <code>propertyVarDocProvider</code>
    </PossiblyUnusedMethod>
    <UndefinedInterfaceMethod>
      <code>getAuthorEmail</code>
      <code>getAuthorName</code>
      <code>getContent</code>
      <code>getContent</code>
      <code>getDescription</code>
      <code>getDescription</code>
      <code>getDescription</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getVariableName</code>
      <code>getVariableName</code>
      <code>getVariableName</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/Scanner/DocBlockScannerTest.php">
    <MissingReturnType>
      <code>testDocBlockScannerDescriptions</code>
      <code>testDocBlockScannerParsesTagsWithNoValuesProperly</code>
      <code>testInvalidDocBlock</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$tags[0]</code>
      <code>$tags[0]</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$tags[0]['name']]]></code>
      <code><![CDATA[$tags[0]['value']]]></code>
    </MixedArrayAccess>
  </file>
</files>
